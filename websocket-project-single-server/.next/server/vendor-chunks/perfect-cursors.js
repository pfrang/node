"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/perfect-cursors";
exports.ids = ["vendor-chunks/perfect-cursors"];
exports.modules = {

/***/ "(ssr)/./node_modules/perfect-cursors/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/perfect-cursors/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerfectCursor: () => (/* binding */ PerfectCursor)\n/* harmony export */ });\n// ../node_modules/@tldraw/vec/dist/esm/index.js\nvar _Vec = class {\n  static clamp(n, min, max) {\n    return Math.max(min, typeof max !== \"undefined\" ? Math.min(n, max) : n);\n  }\n  static clampV(A, min, max) {\n    return A.map((n) => max ? _Vec.clamp(n, min, max) : _Vec.clamp(n, min));\n  }\n  static cross(x, y, z) {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1]);\n  }\n  static snap(a, step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step];\n  }\n};\nvar Vec = _Vec;\nVec.neg = (A) => {\n  return [-A[0], -A[1]];\n};\nVec.add = (A, B) => {\n  return [A[0] + B[0], A[1] + B[1]];\n};\nVec.addScalar = (A, n) => {\n  return [A[0] + n, A[1] + n];\n};\nVec.sub = (A, B) => {\n  return [A[0] - B[0], A[1] - B[1]];\n};\nVec.subScalar = (A, n) => {\n  return [A[0] - n, A[1] - n];\n};\nVec.vec = (A, B) => {\n  return [B[0] - A[0], B[1] - A[1]];\n};\nVec.mul = (A, n) => {\n  return [A[0] * n, A[1] * n];\n};\nVec.mulV = (A, B) => {\n  return [A[0] * B[0], A[1] * B[1]];\n};\nVec.div = (A, n) => {\n  return [A[0] / n, A[1] / n];\n};\nVec.divV = (A, B) => {\n  return [A[0] / B[0], A[1] / B[1]];\n};\nVec.per = (A) => {\n  return [A[1], -A[0]];\n};\nVec.dpr = (A, B) => {\n  return A[0] * B[0] + A[1] * B[1];\n};\nVec.cpr = (A, B) => {\n  return A[0] * B[1] - B[0] * A[1];\n};\nVec.len2 = (A) => {\n  return A[0] * A[0] + A[1] * A[1];\n};\nVec.len = (A) => {\n  return Math.hypot(A[0], A[1]);\n};\nVec.pry = (A, B) => {\n  return _Vec.dpr(A, B) / _Vec.len(B);\n};\nVec.uni = (A) => {\n  return _Vec.div(A, _Vec.len(A));\n};\nVec.normalize = (A) => {\n  return _Vec.uni(A);\n};\nVec.tangent = (A, B) => {\n  return _Vec.uni(_Vec.sub(A, B));\n};\nVec.dist2 = (A, B) => {\n  return _Vec.len2(_Vec.sub(A, B));\n};\nVec.dist = (A, B) => {\n  return Math.hypot(A[1] - B[1], A[0] - B[0]);\n};\nVec.fastDist = (A, B) => {\n  const V = [B[0] - A[0], B[1] - A[1]];\n  const aV = [Math.abs(V[0]), Math.abs(V[1])];\n  let r = 1 / Math.max(aV[0], aV[1]);\n  r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289);\n  return [V[0] * r, V[1] * r];\n};\nVec.ang = (A, B) => {\n  return Math.atan2(_Vec.cpr(A, B), _Vec.dpr(A, B));\n};\nVec.angle = (A, B) => {\n  return Math.atan2(B[1] - A[1], B[0] - A[0]);\n};\nVec.med = (A, B) => {\n  return _Vec.mul(_Vec.add(A, B), 0.5);\n};\nVec.rot = (A, r = 0) => {\n  return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)];\n};\nVec.rotWith = (A, C, r = 0) => {\n  if (r === 0)\n    return A;\n  const s = Math.sin(r);\n  const c = Math.cos(r);\n  const px = A[0] - C[0];\n  const py = A[1] - C[1];\n  const nx = px * c - py * s;\n  const ny = px * s + py * c;\n  return [nx + C[0], ny + C[1]];\n};\nVec.isEqual = (A, B) => {\n  return A[0] === B[0] && A[1] === B[1];\n};\nVec.lrp = (A, B, t) => {\n  return _Vec.add(A, _Vec.mul(_Vec.sub(B, A), t));\n};\nVec.int = (A, B, from, to, s = 1) => {\n  const t = (_Vec.clamp(from, to) - from) / (to - from);\n  return _Vec.add(_Vec.mul(A, 1 - t), _Vec.mul(B, s));\n};\nVec.ang3 = (p1, pc, p2) => {\n  const v1 = _Vec.vec(pc, p1);\n  const v2 = _Vec.vec(pc, p2);\n  return _Vec.ang(v1, v2);\n};\nVec.abs = (A) => {\n  return [Math.abs(A[0]), Math.abs(A[1])];\n};\nVec.rescale = (a, n) => {\n  const l = _Vec.len(a);\n  return [n * a[0] / l, n * a[1] / l];\n};\nVec.isLeft = (p1, pc, p2) => {\n  return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1]);\n};\nVec.clockwise = (p1, pc, p2) => {\n  return _Vec.isLeft(p1, pc, p2) > 0;\n};\nVec.toFixed = (a, d = 2) => {\n  return a.map((v) => +v.toFixed(d));\n};\nVec.nearestPointOnLineThroughPoint = (A, u, P) => {\n  return _Vec.add(A, _Vec.mul(u, _Vec.pry(_Vec.sub(P, A), u)));\n};\nVec.distanceToLineThroughPoint = (A, u, P) => {\n  return _Vec.dist(P, _Vec.nearestPointOnLineThroughPoint(A, u, P));\n};\nVec.nearestPointOnLineSegment = (A, B, P, clamp = true) => {\n  const u = _Vec.uni(_Vec.sub(B, A));\n  const C = _Vec.add(A, _Vec.mul(u, _Vec.pry(_Vec.sub(P, A), u)));\n  if (clamp) {\n    if (C[0] < Math.min(A[0], B[0]))\n      return A[0] < B[0] ? A : B;\n    if (C[0] > Math.max(A[0], B[0]))\n      return A[0] > B[0] ? A : B;\n    if (C[1] < Math.min(A[1], B[1]))\n      return A[1] < B[1] ? A : B;\n    if (C[1] > Math.max(A[1], B[1]))\n      return A[1] > B[1] ? A : B;\n  }\n  return C;\n};\nVec.distanceToLineSegment = (A, B, P, clamp = true) => {\n  return _Vec.dist(P, _Vec.nearestPointOnLineSegment(A, B, P, clamp));\n};\nVec.nudge = (A, B, d) => {\n  if (_Vec.isEqual(A, B))\n    return A;\n  return _Vec.add(A, _Vec.mul(_Vec.uni(_Vec.sub(B, A)), d));\n};\nVec.nudgeAtAngle = (A, a, d) => {\n  return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]];\n};\nVec.toPrecision = (a, n = 4) => {\n  return [+a[0].toPrecision(n), +a[1].toPrecision(n)];\n};\nVec.pointsBetween = (A, B, steps = 6) => {\n  return Array.from(Array(steps)).map((_, i) => {\n    const t = i / (steps - 1);\n    const k = Math.min(1, 0.5 + Math.abs(0.5 - t));\n    return [..._Vec.lrp(A, B, t), k];\n  });\n};\nVec.slope = (A, B) => {\n  if (A[0] === B[0])\n    return NaN;\n  return (A[1] - B[1]) / (A[0] - B[0]);\n};\nVec.max = (...v) => {\n  return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))];\n};\nVec.min = (...v) => {\n  return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))];\n};\n\n// src/spline.ts\nvar Spline = class {\n  constructor(points = []) {\n    this.points = [];\n    this.lengths = [];\n    this.totalLength = 0;\n    this.addPoint = (point) => {\n      if (this.prev) {\n        const length = Vec.dist(this.prev, point);\n        this.lengths.push(length);\n        this.totalLength += length;\n        this.points.push(point);\n      }\n      this.prev = point;\n    };\n    this.clear = () => {\n      this.points = this.prev ? [this.prev] : [];\n      this.totalLength = 0;\n    };\n    this.getSplinePoint = (rt) => {\n      const { points } = this;\n      const l = points.length - 1, d = Math.trunc(rt), p1 = Math.min(d + 1, l), p2 = Math.min(p1 + 1, l), p3 = Math.min(p2 + 1, l), p0 = p1 - 1, t = rt - d;\n      const tt = t * t, ttt = tt * t, q1 = -ttt + 2 * tt - t, q2 = 3 * ttt - 5 * tt + 2, q3 = -3 * ttt + 4 * tt + t, q4 = ttt - tt;\n      return [\n        (points[p0][0] * q1 + points[p1][0] * q2 + points[p2][0] * q3 + points[p3][0] * q4) / 2,\n        (points[p0][1] * q1 + points[p1][1] * q2 + points[p2][1] * q3 + points[p3][1] * q4) / 2\n      ];\n    };\n    this.points = points;\n    this.lengths = points.map((point, i, arr) => i === 0 ? 0 : Vec.dist(point, arr[i - 1]));\n    this.totalLength = this.lengths.reduce((acc, cur) => acc + cur, 0);\n  }\n};\n\n// src/perfect-cursor.ts\nvar _PerfectCursor = class {\n  constructor(cb) {\n    this.state = \"idle\";\n    this.queue = [];\n    this.timestamp = performance.now();\n    this.lastRequestId = 0;\n    this.timeoutId = 0;\n    this.spline = new Spline();\n    this.addPoint = (point) => {\n      clearTimeout(this.timeoutId);\n      const now = performance.now();\n      const duration = Math.min(now - this.timestamp, _PerfectCursor.MAX_INTERVAL);\n      if (!this.prevPoint) {\n        this.spline.clear();\n        this.prevPoint = point;\n        this.spline.addPoint(point);\n        this.cb(point);\n        this.state = \"stopped\";\n        return;\n      }\n      if (this.state === \"stopped\") {\n        if (Vec.dist(this.prevPoint, point) < 4) {\n          this.cb(point);\n          return;\n        }\n        this.spline.clear();\n        this.spline.addPoint(this.prevPoint);\n        this.spline.addPoint(this.prevPoint);\n        this.spline.addPoint(point);\n        this.state = \"idle\";\n      } else {\n        this.spline.addPoint(point);\n      }\n      if (duration < 16) {\n        this.prevPoint = point;\n        this.timestamp = now;\n        this.cb(point);\n        return;\n      }\n      const animation = {\n        start: this.spline.points.length - 3,\n        from: this.prevPoint,\n        to: point,\n        duration\n      };\n      this.prevPoint = point;\n      this.timestamp = now;\n      switch (this.state) {\n        case \"idle\": {\n          this.state = \"animating\";\n          this.animateNext(animation);\n          break;\n        }\n        case \"animating\": {\n          this.queue.push(animation);\n          break;\n        }\n      }\n    };\n    this.animateNext = (animation) => {\n      const start = performance.now();\n      const loop = () => {\n        const t = (performance.now() - start) / animation.duration;\n        if (t <= 1 && this.spline.points.length > 0) {\n          try {\n            this.cb(this.spline.getSplinePoint(t + animation.start));\n          } catch (e) {\n            console.warn(e);\n          }\n          this.lastRequestId = requestAnimationFrame(loop);\n          return;\n        }\n        const next = this.queue.shift();\n        if (next) {\n          this.state = \"animating\";\n          this.animateNext(next);\n        } else {\n          this.state = \"idle\";\n          this.timeoutId = setTimeout(() => {\n            this.state = \"stopped\";\n          }, _PerfectCursor.MAX_INTERVAL);\n        }\n      };\n      loop();\n    };\n    this.dispose = () => {\n      clearTimeout(this.timeoutId);\n    };\n    this.cb = cb;\n  }\n};\nvar PerfectCursor = _PerfectCursor;\nPerfectCursor.MAX_INTERVAL = 300;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/perfect-cursors/dist/esm/index.js\n");

/***/ })

};
;